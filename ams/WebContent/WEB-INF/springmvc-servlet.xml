<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
         http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        
        <!-- 配置组件扫描 -->
        <!-- 配置完成以后，就会自动的将该包进行扫描，然后将其类中所有注解的类都通过bean的形式注入进来 -->
        <context:component-scan base-package="com.xupt.ams"></context:component-scan>
        
        <!-- 配置Spring写好的JSON消息转换器 -->
        <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
        
        <!-- 配置处理器映射和处理器适配器映射 -->
        <mvc:annotation-driven>
        	<mvc:message-converters>	<!-- 将这个消息转换器注册到这个处理器适配器当中，处理器适配器会根据用户的所需要的数据格式，会将程序中的java对象转换为json格式的数据，返回给客户端 -->
        		<ref bean="jsonConverter"/>
        	</mvc:message-converters>
        </mvc:annotation-driven>
      
        <!-- 配置多部分表单解析器(文件上传) -->
        <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        	<property name="maxInMemorySize" value="5242880"></property><!-- 设置最大一次文件大小 ，超过了就会自动的放在此磁盘上处理-->
			<property name="maxUploadSize" value="10485760"></property>	<!-- 设置文件一次性上传的总大小 （10兆）-->
			<property name="defaultEncoding" value="utf-8"></property>	<!-- 设置文件的默认编码格式  -->
        </bean>
        
        <!-- 配置数据源 -->
           <!-- destroy-method="close"应用程序结束时，自动的销毁数据库连接池中的所有数据库连接对象 -->
        <bean id="ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        	<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		   	<property name="url" value="jdbc:mysql://localhost:3306/ams"></property>
		   	<property name="username" value="root"></property>
		   	<property name="password" value="root"></property>
		   	<property name="maxActive" value="20"></property>
		    <property name="maxIdle" value="15"></property>
		    <property name="maxWait" value="5000"></property>
        </bean>
        
       <!-- 配置事务管理器 -->
       <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       		<!-- 配置数据源，提供当前线程要绑定的数据库连接对象 -->
        	<property name="dataSource" ref="ds"></property>
       </bean>
        
        <!-- 配置事务增强 -->
        <tx:advice id="txAdvice" transaction-manager="txManager">
        	<tx:attributes>	<!-- 配置事务增强属性 -->
        		<tx:method name="get*" read-only="true"/>
        		<tx:method name="find*" read-only="true"/>
        		<tx:method name="search*" read-only="true"/>
        		<tx:method name="*" rollback-for="java.lang.Exception"/>
        	</tx:attributes>
        </tx:advice>
        
        <!-- 配置AOP -->
        <aop:config>
        	<!-- 定义切点(需要织入增强的一系列连接点) -->
        	<aop:pointcut expression="execution(public * com.xupt.ams.service..*.*(..))" id="pc1"/>
        	<!--定义通知器  -->
        	<aop:advisor advice-ref="txAdvice" pointcut-ref="pc1"/>
        </aop:config>
        
        <!-- 配置SqlSessionFactory的bean实例，需要配置(数据源、映射的xml文件以及类型别名包)
        SqlSessionFactory实例中包含了事务提交方式，数据源，还用映射的Mapper.xml文件,再次需要配置 -->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        	<!-- 配置数据源(数据库访问层需要获取当前线程绑定的数据库连接对象操作数据库) -->
        	<property name="dataSource" ref="ds"></property>
        	<!-- 配置类型别名包,使用简化的vo类名-->
        	<property name="typeAliasesPackage" value="com.xupt.ams.vo"></property>
        	<!-- 配置具体数据库访问层接口映射的xml文件 -->
        	<property name="mapperLocations">
        		<value>classpath:com/xupt/ams/dao/*Dao.xml</value>
        	</property>
        </bean>
        
        <!-- 配置实现dao接口的所有bean实例 -->
   		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	   		<!-- 首先得获取sqlSession的实例对象，然后创建出实现接口的实例对象，就必须要引用对应的SqlSessionFactory工厂,从中获取SqlSession对象 -->
	     	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	     	<!-- 设置其基类的包，然后spring IoC容器在解析xml文件的时候，myBatis框架会自动的搜索这个com.xupt.ttms.dao
	     	包下的所有接口 ，然后将接口挨个实例化，实例化后的对象名称为简化名(userDao)，注册到spring IoC容器当中-->
	     	<property name="basePackage" value="com.xupt.ams.dao"></property>
   		</bean>
   		
   		<!-- 配置SpringMVC的内部资源视图解析器 -->
   		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
   			<property name="prefix" value="/"></property>
   			<property name="suffix" value=".jsp"></property>
   			<property name="order" value="100"></property>
   		</bean>
</beans>